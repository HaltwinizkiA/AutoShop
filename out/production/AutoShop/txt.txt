

4. Электронный администратор автосервиса
Программа должна позволять просматривать:
▪ Список свободных мест в сервисных гаражах+
▪ Список заказов (сортировать по дате подачи, дате выполнения, дате
планируемого начала выполнения, цене)+
▪ Список авто-мастеров (сортировать по алфавиту, по занятости)+
▪ Список текущих выполняемых заказов (сортировать по дате подачи, дате
выполнения, цене)+
▪ Заказ, выполняемый конкретным мастером+
▪ Мастера, выполняющие конкретный заказ+
▪ Заказы (выполненные/удаленные/отмененные) за промежуток времени
(сортировать по дате подачи, дате выполнения, цене)+

▪ Количество свободных мест на сервисе на любую дату в будущем (вычисляется
из количества свободных слесарей и места в гаражах) ----------????????
▪ Ближайшую свободную дату-------????????


Программа должна предоставлять возможность: (уже сделано)
▪ Добавить/удалить мастера
▪ Добавить/удалить место в гараже
▪ Добавить/удалить/закрыть/отменить/ заказ
▪ Сместить время выполнения заказов (из-за задержек в выполнении текущего)??????????
Требование к задаче:
1) К программе НЕ реализовывать консольный пользовательский интерфейс.
Работоспособность программы проверять из тестового класса с методом main
2) К программе должна быть создана диаграмма классов
3) Программа должна соответствовать принципам ООП и паттернам «Сильное
сцепление» и «Слабая связанность»
4) Для вывода результатов работы использовать System.out.println(message)
5) Для вывода сообщения использовать - System.out.println();
6) Исходные .java файлы должны быть «вкомитаны» в GIT в соответствующую ветку



---------------------------------------------------------------------------------------------------------------------


3. Электронный администратор автосервиса
Программа должна предоставлять возможность:
▪ Добавить/удалить мастера
▪ Добавить/удалить место в гараже
▪ Добавить/удалить/закрыть/отменить/ заказ
▪ Сместить время выполнения заказов (из-за задержек в выполнении текущего)
Требование к задаче:
1) К программе НЕ реализовывать консольный пользовательский интерфейс.
Работоспособность программы проверять из тестового класса с методом main
2) К программе должна быть создана диаграмма классов
3) Программа должна соответствовать принципам ООП и паттернам «Сильное
сцепление» и «Слабая связанность»
4) Для вывода результатов работы использовать System.out.println(message)
5) Исходные .java файлы должны быть «вкомитаны» в GIT в соответствующую ветку
--
